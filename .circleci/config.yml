version: 2.1


orbs:
  aws-eks: circleci/aws-eks@1.0.0
  kubernetes: circleci/kubernetes@0.11.1

jobs:
  build-and-lint: 
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
              python3 -m venv venv
              . venv/bin/activate
              make install
              # Install hadolint
              wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
              chmod +x /bin/hadolint
      - save_cache:
          paths: [./venv]
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      
      # run lint!
      - run:
          name: run lint
          command: |
              . venv/bin/activate
              make lint  

  run-docker: 
    docker:
      - image: circleci/golang:1.15
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: build Docker Container 
          command: |
              docker build --tag=hello-app  .
              docker images
      - run:
          name: upload docker conatainer
          command: |
             docker login --username="$DOCKER_USERNAME" --password="$DOCKER_PASSWORD"
             docker tag hello-app $DOCKER_PATH
             echo "Docker ID and Image: $DOCKER_PATH"
             docker push $DOCKER_PATH

  create-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          capstone-udacity
        type: string
    steps:
      - checkout
      - aws-eks/install-aws-iam-authenticator:
        release-tag: ''
      - run:
          name: Inatall eksctl
          command: |
            if which eksctl > /dev/null; then
            echo "eksctl is already installed"
            exit 0
            fi

            mkdir -p eksctl_download
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C eksctl_download
            ls -lrt
            pwd  
            chmod +x eksctl_download/eksctl 
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
                SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download

      - aws-eks/create-cluster:
            cluster-name: << parameters.cluster-name >>
            skip-kubectl-install: false
            verbose: 3
            node-type: t2.medium
            nodes-max: 2
            ssh-access: false
            ssh-public-key: '' 

  deploy-application:
      executor: aws-eks/python3
      parameters:
        cluster-name:
          description: |
            capstone-udacity
          type: string
        aws-region:
          description: |
            AWS region
          type: string
          default: "$AWS_DEFAULT_REGION"
      steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
          aws-region: "$AWS_DEFAULT_REGION" 
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: deployment.yml
          resource-name: deployment/capstone-udacity
          
  test-application:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          capstone-udacity
        type: string
      aws-region:
        description: |
          AWS region
        type: string
        default: "$AWS_DEFAULT_REGION"  
    steps:
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
          aws-region: "$AWS_DEFAULT_REGION" 
      - run:
          name: Wait for service to be ready
          command: |
            kubectl get services
            kubectl get nodes 
            kubectl get pods
            kubectl get deployment


  
    


              
workflows:
  default:
     jobs:
        - run-docker
            # requires: [build-and-lint]
        - create-cluster:
            cluster-name: udacity-capstone
            requires: [run-docker]
        - deploy-application:
            cluster-name: udacity-capstone
            requires:
              - "create-cluster"
        - test-application:
            cluster-name: udacity-capstone
            requires:
              - "deploy-application"
        # - aws-eks/update-container-image:
        #     cluster-name: udacity-capstone
        #     container-image-updates: 'falay=falay/api:v1.0'
        #     record: true
        #     requires:
        #       - deploy-application
        #     resource-name: deployment/capstone-udacity
